[{"H:\\Mern_Bootcamp\\projfrontend\\src\\index.js":"1","H:\\Mern_Bootcamp\\projfrontend\\src\\Routes.js":"2","H:\\Mern_Bootcamp\\projfrontend\\src\\user\\Signup.js":"3","H:\\Mern_Bootcamp\\projfrontend\\src\\user\\Signin.js":"4","H:\\Mern_Bootcamp\\projfrontend\\src\\core\\Home.js":"5","H:\\Mern_Bootcamp\\projfrontend\\src\\core\\Base.js":"6","H:\\Mern_Bootcamp\\projfrontend\\src\\backend.js":"7","H:\\Mern_Bootcamp\\projfrontend\\src\\auth\\helper\\index.js":"8","H:\\Mern_Bootcamp\\projfrontend\\src\\core\\Menu.js":"9","H:\\Mern_Bootcamp\\projfrontend\\src\\user\\AdminDashBoard.js":"10","H:\\Mern_Bootcamp\\projfrontend\\src\\user\\UserDashBoard.js":"11","H:\\Mern_Bootcamp\\projfrontend\\src\\auth\\helper\\AdminRoutes.js":"12","H:\\Mern_Bootcamp\\projfrontend\\src\\auth\\helper\\PrivateRoutes.js":"13","H:\\Mern_Bootcamp\\projfrontend\\src\\admin\\AddCategory.js":"14"},{"size":160,"mtime":1609919826270,"results":"15","hashOfConfig":"16"},{"size":1073,"mtime":1610444349950,"results":"17","hashOfConfig":"16"},{"size":3808,"mtime":1610444350162,"results":"18","hashOfConfig":"16"},{"size":3330,"mtime":1610444350150,"results":"19","hashOfConfig":"16"},{"size":664,"mtime":1610444350104,"results":"20","hashOfConfig":"16"},{"size":1013,"mtime":1610444350090,"results":"21","hashOfConfig":"16"},{"size":51,"mtime":1609919826102,"results":"22","hashOfConfig":"16"},{"size":1436,"mtime":1609919826101,"results":"23","hashOfConfig":"16"},{"size":2423,"mtime":1610444350116,"results":"24","hashOfConfig":"16"},{"size":2161,"mtime":1610444350130,"results":"25","hashOfConfig":"16"},{"size":245,"mtime":1610444350163,"results":"26","hashOfConfig":"16"},{"size":593,"mtime":1610444350050,"results":"27","hashOfConfig":"16"},{"size":561,"mtime":1610444350073,"results":"28","hashOfConfig":"16"},{"size":1063,"mtime":1610473154079,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"d4blwl",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"H:\\Mern_Bootcamp\\projfrontend\\src\\index.js",[],["63","64"],"H:\\Mern_Bootcamp\\projfrontend\\src\\Routes.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\user\\Signup.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\user\\Signin.js",["65","66"],"import React, { useState } from \"react\";\r\nimport Base from \"../core/Base\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { signin, authenticate, isAutheticated } from \"../auth/helper\";\r\n\r\nconst Signin = () => {\r\n  const [values, setValues] = useState({\r\n    email: \"meetsundrani@gmail.com\",\r\n    password: \"12345\",\r\n    error: \"\",\r\n    loading: false,\r\n    didRedirect: false,\r\n  });\r\n\r\n  const { email, password, error, loading, didRedirect } = values;\r\n  const { user } = isAutheticated();\r\n\r\n  const handleChange = (name) => (event) => {\r\n    setValues({ ...values, error: false, [name]: event.target.value });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValues({ ...values, error: false, loading: true });\r\n    signin({ email, password })\r\n      .then((data) => {\r\n        if (data.error) {\r\n          setValues({ ...values, error: data.error, loading: false });\r\n        } else {\r\n          authenticate(data, () => {\r\n            setValues({\r\n              ...values,\r\n              didRedirect: true,\r\n            });\r\n          });\r\n        }\r\n      })\r\n      .catch(console.log(\"signin request failed\"));\r\n  };\r\n\r\n  const performRedirect = () => {\r\n    //TODO: do a redirect here\r\n    if (didRedirect) {\r\n      if (user && user.role === 1) {\r\n        return <Redirect to=\"/admin/dashboard\" />;\r\n      } else {\r\n        return <Redirect to=\"/user/dashboard\" />;\r\n      }\r\n    }\r\n    if (isAutheticated()) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n  };\r\n\r\n  const loadingMessage = () => {\r\n    return (\r\n      loading && (\r\n        <div className=\"alert alert-info\">\r\n          <h2>Loading...</h2>\r\n        </div>\r\n      )\r\n    );\r\n  };\r\n\r\n  const errorMessage = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <div\r\n            className=\"alert alert-danger\"\r\n            style={{ display: error ? \"\" : \"none\" }}\r\n          >\r\n            {error}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const signInForm = () => {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 offset-sm-3 text-left\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label className=\"text-light\">Email</label>\r\n              <input\r\n                onChange={handleChange(\"email\")}\r\n                value={email}\r\n                className=\"form-control\"\r\n                type=\"email\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label className=\"text-light\">Password</label>\r\n              <input\r\n                onChange={handleChange(\"password\")}\r\n                value={password}\r\n                className=\"form-control\"\r\n                type=\"password\"\r\n              />\r\n            </div>\r\n            <button onClick={onSubmit} className=\"btn btn-success btn-block\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Base title=\"Sign In page\" description=\"A page for user to sign in!\">\r\n      {loadingMessage()}\r\n      {errorMessage()}\r\n      {signInForm()}\r\n      {performRedirect()}\r\n\r\n      <p className=\"text-white text-center\">{JSON.stringify(values)}</p>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","H:\\Mern_Bootcamp\\projfrontend\\src\\core\\Home.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\core\\Base.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\backend.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\auth\\helper\\index.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\core\\Menu.js",[],["67","68"],"H:\\Mern_Bootcamp\\projfrontend\\src\\user\\AdminDashBoard.js",["69","70"],"import React from \"react\";\r\nimport Base from \"../core/Base\";\r\nimport { isAutheticated } from \"../auth/helper/index\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nconst AdminDashBoard = () => {\r\n  const {\r\n    user: { name, email, role },\r\n  } = isAutheticated();\r\n\r\n  const left = () => {\r\n    return (\r\n      <div className=\"card\">\r\n        <h4 className=\"card-header bg-dark text-white \">Admin Navigation</h4>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">\r\n            <Link to=\"/admin/create/category\" className=\"nav-link text-info\">\r\n              Create Categories\r\n            </Link>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <Link to=\"/admin/create/product\" className=\"nav-link text-info\">\r\n              Create Products\r\n            </Link>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <Link className=\"nav-link text-info\">Manage Orders</Link>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <Link className=\"nav-link text-info\">Manage Products</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const right = () => {\r\n    return (\r\n      <div className=\"card mb-4\">\r\n        <h4 className=\"card-header\">Admin Information</h4>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">\r\n            <span className=\"badge badge-success mr-2\">Name:</span>\r\n            {name}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"badge badge-success mr-2\">Email:</span>\r\n            {email}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"badge badge-danger\">Admin Area</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <Base\r\n      title=\"Welcome to Admin Section\"\r\n      description=\"Manage all your products here\"\r\n      className=\"container bg-success p-4\"\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"col-3\">{left()}</div>\r\n        <div className=\"col-9\">{right()}</div>\r\n      </div>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default AdminDashBoard;\r\n","H:\\Mern_Bootcamp\\projfrontend\\src\\user\\UserDashBoard.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\auth\\helper\\AdminRoutes.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\auth\\helper\\PrivateRoutes.js",[],"H:\\Mern_Bootcamp\\projfrontend\\src\\admin\\AddCategory.js",["71","72","73","74","75","76","77","78","79","80"],"import React,{useState} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Base from \"../core/Base\";\r\nimport {isAutheticated} from \"../auth/helper/index\"\r\nconst AddCategory = () => {\r\nconst [name,setName]=useState(\"initialState\");\r\nconst [error,setError]=useState(false);\r\nconst [success, setSuccess] = useState(false);\r\n\r\nconst {user,token}=isAutheticated();\r\n\r\nconst myCategoryForm=()=>(\r\n  <form>\r\n  <div className=\"form-group\">\r\n    <p className=\"lead\">Enter the category</p>\r\n    <input type=\"text\" className=\"form-control my-3\" autoFocus required placeholder=\"For Ex. Summer\"/>\r\n    <button className=\"btn btn-outline-info\">Create Category</button>\r\n  </div>\r\n  \r\n  </form>)\r\n\r\n\r\n  return (\r\n    <Base\r\n      title=\"Create a Category\"\r\n      description=\"Add a new Category for a new tshirts\"\r\n      className=\"container bg-info p-4\"\r\n    >\r\n      <div className=\"row bg-white rounded\">\r\n        <div className=\"col-md-8 offset-md-2\">\r\n          <h1>Hello</h1>\r\n        </div>\r\n      </div>\r\n    </Base>\r\n  );\r\n};\r\nexport default AddCategory;\r\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"89","line":3,"column":10,"nodeType":"87","messageId":"88","endLine":3,"endColumn":14},{"ruleId":"81","replacedBy":"90"},{"ruleId":"83","replacedBy":"91"},{"ruleId":"85","severity":1,"message":"92","line":4,"column":16,"nodeType":"87","messageId":"88","endLine":4,"endColumn":26},{"ruleId":"85","severity":1,"message":"93","line":7,"column":26,"nodeType":"87","messageId":"88","endLine":7,"endColumn":30},{"ruleId":"85","severity":1,"message":"89","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":14},{"ruleId":"85","severity":1,"message":"94","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":12},{"ruleId":"85","severity":1,"message":"95","line":6,"column":13,"nodeType":"87","messageId":"88","endLine":6,"endColumn":20},{"ruleId":"85","severity":1,"message":"96","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":13},{"ruleId":"85","severity":1,"message":"97","line":7,"column":14,"nodeType":"87","messageId":"88","endLine":7,"endColumn":22},{"ruleId":"85","severity":1,"message":"98","line":8,"column":8,"nodeType":"87","messageId":"88","endLine":8,"endColumn":15},{"ruleId":"85","severity":1,"message":"99","line":8,"column":17,"nodeType":"87","messageId":"88","endLine":8,"endColumn":27},{"ruleId":"85","severity":1,"message":"100","line":10,"column":8,"nodeType":"87","messageId":"88","endLine":10,"endColumn":12},{"ruleId":"85","severity":1,"message":"101","line":10,"column":13,"nodeType":"87","messageId":"88","endLine":10,"endColumn":18},{"ruleId":"85","severity":1,"message":"102","line":12,"column":7,"nodeType":"87","messageId":"88","endLine":12,"endColumn":21},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.",["103"],["104"],"'withRouter' is defined but never used.","'role' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'success' is assigned a value but never used.","'setSuccess' is assigned a value but never used.","'user' is assigned a value but never used.","'token' is assigned a value but never used.","'myCategoryForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]